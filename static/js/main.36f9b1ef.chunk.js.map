{"version":3,"sources":["Todo.js","TodoForm.js","App.js","index.js"],"names":["Todo","props","useState","todo","text","todoText","setTodoText","editMode","setEditMode","complete","setComplete","require","generate","className","onClick","type","name","checked","value","onChange","e","target","stopPropagation","onDelete","icon","faTrash","faEdit","TodoForm","onSubmit","preventDefault","onSave","handleSubmit","placeholder","App","todos","setTodos","map","index","newTodos","splice","deleteTodo","onUpdate","updateTodo","alert","isComplete","addTodo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4NA+DeA,MA3Df,SAAcC,GACZ,MAAgCC,mBAASD,EAAME,KAAKC,MAApD,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAAgCJ,oBAAS,GAAzC,mBAAOK,EAAP,KAAiBC,EAAjB,KACA,EAAgCN,oBAAS,GAAzC,mBAAOO,EAAP,KAAiBC,EAAjB,KAGA,OAFgBC,EAAQ,IAAWC,WAGjC,sBACEC,UAAU,0EACVC,QAAS,WAyCXJ,GAzCmCD,IAFnC,UAIE,uBACEI,UAAU,wBACVE,KAAK,WACLC,KAAK,YACLC,QAASR,IAGX,qBAAKI,UAAU,cAAf,SACGN,EACC,uBACEM,UAAU,yBACVE,KAAK,OACLC,KAAK,WACLE,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAYc,EAAEC,OAAOH,QACtCJ,QAAS,SAACM,GAAD,OAAOA,EAAEE,qBAGpB,sBAAMT,UAAS,UAAKJ,EAAW,eAAiB,IAAhD,SACGJ,MAIP,qBACEQ,UAAU,YACVC,QAAS,SAACM,GACRA,EAAEE,kBACFrB,EAAMsB,YAJV,SAOE,cAAC,IAAD,CAAiBV,UAAU,eAAeW,KAAMC,QAElD,qBAAKZ,UAAU,YAAYC,QAU/B,SAAwBM,GACtBA,EAAEE,kBACFd,GAAaD,IAZX,SACE,cAAC,IAAD,CAAiBM,UAAU,gBAAgBW,KAAME,YCb1CC,MAjCf,SAAkB1B,GAChB,MAAgCC,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KAEA,OACE,uBAAMO,UAAU,0BAA0Be,SAAU,SAACR,GAAD,OAoBtD,SAAsBA,GAEpB,GADAA,EAAES,iBACe,KAAbxB,EAAiB,OAErBC,EAAY,IACZL,EAAM6B,OAAOzB,GAzB8C0B,CAAaX,IAAxE,UACE,sBAAKP,UAAU,OAAf,UACE,uBACEA,UAAU,kBACVmB,YAAY,kBACZjB,KAAK,OACLG,MAAOb,EACPc,SAAU,SAACC,GAAD,OAAOd,EAAYc,EAAEC,OAAOH,UAExC,sBAAML,UAAU,sBAAhB,8BAEF,wBACEA,UAAU,6GACVE,KAAK,SAFP,2BCuCSkB,MAnDf,WACE,MAA0B/B,mBAAS,IAAnC,mBAAOgC,EAAP,KAAcC,EAAd,KAEA,OACE,sBAAKtB,UAAU,yDAAf,UACE,wBAAQA,UAAU,8CAAlB,8BAGA,sBAAKA,UAAU,kBAAf,UACGqB,EAAME,KAAI,SAACjC,EAAMkC,GAAP,OACT,cAAC,EAAD,CAEElC,KAAMA,EACNoB,SAAU,kBAwBpB,SAAoBc,GAClB,IAAIC,EAAQ,YAAOJ,GACnBI,EAASC,OAAOF,EAAO,GACvBF,EAASG,GA3BeE,CAAWH,IAC3BI,SAAU,kBA6BpB,SAAoBJ,GAClB,IAAIC,EAAQ,YAAOJ,GACLI,EAASD,GAEvBF,EAASG,GAjCeI,CAAWL,KAHtBA,MAMT,cAAC,EAAD,CAAUP,OAAQ,SAACzB,GAAD,OAKxB,SAAiBA,GACf,GAAiB,KAAbA,EAEF,YADAsC,MAAM,gCAIRR,EAAS,GAAD,mBACHD,GADG,CAEN,CACEU,YAAY,EACZxC,KAAMC,MAf0BwC,CAAQxC,aCjBhDyC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.36f9b1ef.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTrash, faEdit } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nfunction Todo(props) {\r\n  const [todoText, setTodoText] = useState(props.todo.text);\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [complete, setComplete] = useState(false);\r\n  const shortid = require(\"shortid\").generate();\r\n\r\n  return (\r\n    <div\r\n      className='my-3 p-3 bg-white rounded-lg shadow-md flex items-center cursor-pointer'\r\n      onClick={() => updateCompletion(!complete)}\r\n    >\r\n      <input\r\n        className='form-checkbox w-5 h-8'\r\n        type='checkbox'\r\n        name='completed'\r\n        checked={complete}\r\n        // onChange={}\r\n      />\r\n      <div className='ml-3 flex-1'>\r\n        {editMode ? (\r\n          <input\r\n            className='w-full input-underline'\r\n            type='text'\r\n            name='todoText'\r\n            value={todoText}\r\n            onChange={(e) => setTodoText(e.target.value)}\r\n            onClick={(e) => e.stopPropagation()}\r\n          />\r\n        ) : (\r\n          <span className={`${complete ? \"line-through\" : \"\"}`}>\r\n            {todoText}\r\n          </span>\r\n        )}\r\n      </div>\r\n      <div\r\n        className='hover-btn'\r\n        onClick={(e) => {\r\n          e.stopPropagation();\r\n          props.onDelete();\r\n        }}\r\n      >\r\n        <FontAwesomeIcon className='text-red-500' icon={faTrash} />\r\n      </div>\r\n      <div className='hover-btn' onClick={updateEditMode}>\r\n        <FontAwesomeIcon className='text-blue-500' icon={faEdit} />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  function updateCompletion(completed) {\r\n    setComplete(completed);\r\n  }\r\n\r\n  function updateEditMode(e) {\r\n    e.stopPropagation();\r\n    setEditMode(!editMode);\r\n  }\r\n}\r\n\r\nexport default Todo;\r\n","import React, { useState } from \"react\";\r\n\r\nfunction TodoForm(props) {\r\n  const [todoText, setTodoText] = useState(\"\");\r\n\r\n  return (\r\n    <form className='bg-white rounded-lg p-3' onSubmit={(e) => handleSubmit(e)}>\r\n      <div className='mb-4'>\r\n        <input\r\n          className='input-underline'\r\n          placeholder='Enter a todo...'\r\n          type='text'\r\n          value={todoText}\r\n          onChange={(e) => setTodoText(e.target.value)}\r\n        ></input>\r\n        <span className='text-red-500 hidden'>Invalid input</span>\r\n      </div>\r\n      <button\r\n        className='bg-blue-700 active:bg-blue-800 w-full shadow-md flex items-center p-2 justify-center rounded-md text-white'\r\n        type='submit'\r\n      >\r\n        Add to do\r\n      </button>\r\n    </form>\r\n  );\r\n\r\n  function handleSubmit(e) {\r\n    e.preventDefault();\r\n    if (todoText === \"\") return;\r\n\r\n    setTodoText(\"\");\r\n    props.onSave(todoText);\r\n  }\r\n}\r\n\r\nexport default TodoForm;\r\n","import React, { useState } from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport Todo from \"./Todo\";\r\nimport TodoForm from \"./TodoForm\";\r\n\r\nfunction App() {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  return (\r\n    <div className='h-screen flex flex-col items-center justify-center p-8'>\r\n      <header className='text-center w-auto mb-5 text-3xl text-white'>\r\n        Got stuff to do?\r\n      </header>\r\n      <div className='w-full max-w-lg'>\r\n        {todos.map((todo, index) => (\r\n          <Todo\r\n            key={index}\r\n            todo={todo}\r\n            onDelete={() => deleteTodo(index)}\r\n            onUpdate={() => updateTodo(index)}\r\n          ></Todo>\r\n        ))}\r\n        <TodoForm onSave={(todoText) => addTodo(todoText)} />\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  function addTodo(todoText) {\r\n    if (todoText === \"\") {\r\n      alert(\"Please give your todo a name\");\r\n      return;\r\n    }\r\n\r\n    setTodos([\r\n      ...todos,\r\n      {\r\n        isComplete: false,\r\n        text: todoText,\r\n      },\r\n    ]);\r\n  }\r\n\r\n  function deleteTodo(index) {\r\n    let newTodos = [...todos];\r\n    newTodos.splice(index, 1);\r\n    setTodos(newTodos);\r\n  }\r\n\r\n  function updateTodo(index) {\r\n    let newTodos = [...todos];\r\n    let updated = newTodos[index];\r\n\r\n    setTodos(newTodos);\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}